/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.4.3. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input  CLK_25MHZ // clock
    , input  RESET // reset
    , input  BTN_UP
    , input  BTN_DOWN

      // Outputs
    , output wire  VGA_HSYNC
    , output wire  VGA_VSYNC
    , output wire  VGA_DE
    , output wire [7:0] VGA_RED
    , output wire [7:0] VGA_GREEN
    , output wire [7:0] VGA_BLUE
    );
  wire [23:0] result;
  wire  c$app_arg;
  reg [9:0] vgaY;
  wire  c$app_arg_0;
  reg [10:0] vgaX;
  wire [0:0] c$app_arg_1;
  reg  eta;
  wire [0:0] c$app_arg_2;
  reg  eta_0;
  wire [8:0] coord;
  reg  result_0;
  wire [10:0] c$case_alt;
  wire [10:0] c$case_alt_0;
  wire [10:0] c$case_alt_1;
  wire [10:0] c$case_alt_2;
  reg [10:0] result_1;
  reg [11:0] result_2;
  wire [5:0] cnt;
  wire [11:0] c$case_alt_3;
  wire [6:0] cnt_0;
  wire [11:0] c$case_alt_4;
  wire [3:0] cnt_1;
  wire [11:0] c$case_alt_5;
  wire [9:0] cnt_2;
  wire [11:0] c$case_alt_6;
  reg [11:0] result_3 = {2'b00,10'd0};
  wire [5:0] cnt_3;
  wire [8:0] cnt_4;
  wire [3:0] cnt_5;
  wire [0:0] cnt_6;
  wire [4:0] cnt_7;
  reg [10:0] result_4 = {2'b00,9'd0};
  wire [9:0] coord_0;
  reg [11:0] result_5;
  wire [5:0] cnt_8;
  wire [11:0] c$case_alt_7;
  wire [6:0] cnt_9;
  wire [11:0] c$case_alt_8;
  wire [3:0] cnt_10;
  wire [11:0] c$case_alt_9;
  wire [9:0] cnt_11;
  wire [11:0] c$case_alt_10;
  reg [11:0] result_6 = {2'b00,10'd0};
  reg [10:0] c$b_app_arg = {1'b0,10'bxxxxxxxxxx};
  wire  c$case_alt_11;
  wire  c$case_alt_12;
  wire  c$case_alt_13;
  wire [9:0] a1;
  wire [9:0] b1;
  wire  result_7;
  wire [9:0] c$f2_case_alt;
  wire  c$f2_case_scrut;
  wire [9:0] c$f2_case_alt_0;
  wire [9:0] result_8;
  wire [9:0] result_9;
  wire [8:0] x;
  reg [9:0] r = {1'b0,9'bxxxxxxxxx};
  wire [9:0] a1_0;
  wire  b;
  wire  b_0;
  wire [9:0] f2;
  wire [10:0] result_10;
  wire [1:0] result_11;
  wire  b_1;
  wire [7:0] x_0;
  reg [8:0] scaled = {1'b0,8'bxxxxxxxx};
  wire [8:0] result_12;
  wire [8:0] result_13;
  wire  b_2;
  wire [8:0] c$f2_case_alt_1;
  wire [8:0] c$f2_case_alt_2;
  reg [0:0] counter = 1'd0;
  wire [0:0] result_14;
  wire  b_3;
  wire  c$case_alt_14;
  wire  c$case_alt_15;
  wire  c$case_alt_16;
  wire [8:0] a1_1;
  wire [8:0] b1_0;
  wire  result_15;
  wire [0:0] result_16;
  wire [0:0] f2_0;
  wire  b_4;
  reg [9:0] prev = {1'b0,9'bxxxxxxxxx};
  reg [9:0] c$b_app_arg_0 = {1'b0,9'bxxxxxxxxx};
  wire  c$case_alt_17;
  wire  c$case_alt_18;
  wire  c$case_alt_19;
  wire [8:0] a1_2;
  wire [8:0] b1_1;
  wire  result_17;
  wire [9:0] c$f2_case_alt_3;
  wire  c$f2_case_scrut_0;
  wire [9:0] c$f2_case_alt_4;
  wire [9:0] result_18;
  wire [9:0] result_19;
  wire [8:0] x_1;
  reg [9:0] r_0 = {1'b0,9'bxxxxxxxxx};
  wire [8:0] a1_3;
  wire  b_5;
  wire  b_6;
  wire [9:0] f2_1;
  wire [10:0] result_20;
  wire [1:0] result_21;
  wire  b_7;
  wire [7:0] x_2;
  reg [8:0] scaled_0 = {1'b0,8'bxxxxxxxx};
  wire [8:0] result_22;
  wire [8:0] result_23;
  wire  b_8;
  wire [8:0] c$f2_case_alt_5;
  wire [8:0] c$f2_case_alt_6;
  reg [0:0] counter_0 = 1'd0;
  wire [0:0] result_24;
  wire  b_9;
  wire  c$case_alt_20;
  wire  c$case_alt_21;
  wire  c$case_alt_22;
  wire [8:0] a1_4;
  wire [8:0] b1_2;
  wire  result_25;
  wire [0:0] result_26;
  wire [0:0] f2_2;
  wire  b_10;
  reg [9:0] prev_0 = {1'b0,9'bxxxxxxxxx};
  // src/Pong.hs:25:1-9
  wire  c$st_case_alt;
  wire  result_27;
  // src/Pong/Game.hs:75:1-11
  wire [1:0] inp;
  wire [50:0] result_28;
  wire [50:0] c$case_alt_23;
  // src/Pong/Game.hs:75:1-11
  wire signed [9:0] x_3;
  // src/Pong/Game.hs:75:1-11
  wire signed [9:0] x3;
  // src/Pong/Game.hs:75:1-11
  wire [19:0] x2;
  // src/Pong/Game.hs:75:1-11
  wire [19:0] x1;
  // src/Pong/Game.hs:75:1-11
  wire [19:0] x1_0;
  // src/Pong/Game.hs:75:1-11
  wire [19:0] x2_0;
  // src/Pong/Game.hs:75:1-11
  wire signed [9:0] x3_0;
  // src/Pong/Game.hs:75:1-11
  wire  x4;
  wire [50:0] c$case_alt_24;
  wire signed [9:0] c$app_arg_3;
  wire signed [9:0] c$case_alt_25;
  wire [50:0] c$updateState_$jOut_app_arg;
  wire [50:0] c$updateState_$jOut_case_alt;
  wire [50:0] c$updateState_$jOut_case_alt_0;
  // src/Pong/Game.hs:75:1-11
  wire  x4_0;
  // src/Pong/Game.hs:75:1-11
  wire [19:0] x2_1;
  // src/Pong/Game.hs:75:1-11
  wire [19:0] x1_1;
  wire signed [9:0] c$updateState_$jOut_app_arg_0;
  // src/Pong/Game.hs:75:1-11
  wire signed [9:0] x3_1;
  wire [50:0] result_29;
  wire [50:0] c$app_arg_app_arg_case_alt;
  wire [50:0] c$app_arg_app_arg_case_alt_0;
  // src/Pong/Game.hs:75:1-11
  wire  s3;
  // src/Pong/Game.hs:75:1-11
  wire signed [9:0] nudge;
  // src/Pong/Game.hs:75:1-11
  wire signed [9:0] c$nudge_case_alt;
  // src/Pong/Game.hs:75:1-11
  wire [19:0] a3;
  reg [20:0] c$updateState_$sreflectM_$jOut;
  wire signed [9:0] dx;
  wire [1:0] c$updateState_$sreflectM_$jOut_app_arg;
  wire [1:0] c$updateState_$sreflectM_$jOut_case_alt;
  wire signed [9:0] diff;
  wire signed [9:0] x_4;
  // src/Pong/Game.hs:75:1-11
  wire  x4_1;
  wire [19:0] eta1;
  reg [20:0] c$updateState_$sreflectM_$jOut_0;
  wire signed [9:0] dx_0;
  wire [1:0] c$updateState_$sreflectM_$jOut_app_arg_0;
  wire [1:0] c$updateState_$sreflectM_$jOut_case_alt_0;
  wire signed [9:0] diff_0;
  wire signed [9:0] x_5;
  // src/Pong/Game.hs:75:1-11
  wire signed [9:0] dx1;
  // src/Pong/Game.hs:75:1-11
  wire signed [9:0] x7;
  // src/Pong/Game.hs:75:1-11
  wire [19:0] x1_2;
  // src/Pong/Game.hs:75:1-11
  wire signed [9:0] y;
  // src/Pong/Game.hs:75:1-11
  wire [19:0] a2;
  reg [20:0] c$updateState_$sreflectM_$jOut_1;
  wire signed [9:0] dx_1;
  wire [1:0] c$updateState_$sreflectM_$jOut_app_arg_1;
  wire [1:0] c$updateState_$sreflectM_$jOut_case_alt_1;
  wire signed [9:0] diff_1;
  wire signed [9:0] x_6;
  // src/Pong/Game.hs:75:1-11
  wire [19:0] \s' ;
  wire [19:0] eta1_0;
  reg [20:0] c$updateState_$sreflectM_$jOut_2;
  wire signed [9:0] dx_2;
  wire [1:0] c$updateState_$sreflectM_$jOut_app_arg_2;
  wire [1:0] c$updateState_$sreflectM_$jOut_case_alt_2;
  wire signed [9:0] diff_2;
  wire signed [9:0] x_7;
  // src/Pong/Game.hs:75:1-11
  wire signed [9:0] dx_3;
  // src/Pong/Game.hs:75:1-11
  wire signed [9:0] x_8;
  // src/Pong/Game.hs:75:1-11
  wire [19:0] x2_2;
  // src/Pong/Game.hs:75:1-11
  wire signed [9:0] x3_2;
  // src/Pong/Video.hs:19:1-4
  wire signed [31:0] c$x_app_arg;
  // src/Pong/Video.hs:19:1-4
  wire signed [31:0] c$y_app_arg;
  wire  c$case_alt_26;
  wire  c$case_alt_27;
  wire  result_30;
  // src/Pong/Video.hs:19:1-4
  wire signed [9:0] x0;
  // src/Pong/Video.hs:19:1-4
  wire signed [9:0] y0;
  wire  c$case_alt_28;
  wire  c$case_alt_29;
  wire  c$case_alt_30;
  wire [23:0] c$case_alt_31;
  wire [23:0] c$case_alt_32;
  wire [23:0] c$case_alt_33;
  wire [23:0] c$case_alt_34;
  wire [23:0] result_31;
  wire [23:0] result_32;
  // src/Pong/Video.hs:19:1-4
  wire signed [9:0] x_9;
  // src/Pong/Video.hs:19:1-4
  wire signed [9:0] y_0;
  // src/Pong.hs:25:1-9
  wire signed [31:0] c$ds4_app_arg;
  // src/Pong.hs:25:1-9
  wire signed [31:0] c$ds4_app_arg_0;
  // src/Pong.hs:25:1-9
  wire signed [31:0] c$ds4_app_arg_1;
  // src/Pong.hs:25:1-9
  wire [15:0] c$ds3_case_alt;
  wire [23:0] c$case_alt_35;
  wire [23:0] result_33;
  wire [23:0] result_34;
  wire  b1_3;
  // src/Pong.hs:25:1-9
  wire [7:0] a2_0;
  // src/Pong.hs:25:1-9
  wire [7:0] b2;
  // src/Pong.hs:25:1-9
  wire [8:0] eta4;
  // src/Pong.hs:25:1-9
  wire [8:0] eta5;
  // src/Pong.hs:25:1-9
  wire [7:0] x1_3;
  // src/Pong.hs:25:1-9
  wire [7:0] y1;
  // src/Pong.hs:25:1-9
  reg  old = 1'b0;
  // src/Pong.hs:25:1-9
  wire [15:0] b_11;
  // src/Pong.hs:25:1-9
  wire [7:0] a3_0;
  // src/Pong.hs:25:1-9
  wire [7:0] a3_1;
  // src/Pong.hs:25:1-9
  wire [7:0] a4;
  // src/Pong.hs:25:1-9
  wire [7:0] a5;
  // src/Pong.hs:25:1-9
  wire [15:0] b1_4;
  // src/Pong.hs:25:1-9
  wire [7:0] a1_5;
  // src/Pong.hs:25:1-9
  wire [7:0] b1_5;
  wire [31:0] \x# ;
  wire [31:0] \x#_0 ;
  wire [31:0] \x#_1 ;
  // src/Pong.hs:25:1-9
  reg [50:0] st = {{10'sd10,   10'sd2},   {10'sd100,   10'sd3},   10'sd100,   1'b0};
  // src/Pong.hs:25:1-9
  wire [23:0] ds4;
  // src/Pong.hs:25:1-9
  wire  s;
  wire [10:0] c$case_alt_selection_14;
  wire [10:0] c$case_alt_selection_17;
  wire [10:0] c$f2_case_scrut_selection_1;
  wire [10:0] b_selection_1;
  wire [9:0] c$case_alt_selection_24;
  wire [9:0] c$case_alt_selection_27;
  wire [9:0] c$f2_case_scrut_selection_4;
  wire [9:0] b_selection_6;
  wire [9:0] s_selection_1;
  wire [26:0] VGA;
  wire [2:0] VGA_0;

  assign result = {{~ (c$app_arg_2),
                    ~ (c$app_arg_1),   c$app_arg_0 & c$app_arg},
                   vgaX,   vgaY};

  assign c$app_arg = vgaY[9:9] ? 1'b1 : 1'b0;

  always @(*) begin
    case(result_4[10:9])
      2'b00 : vgaY = {1'b1,coord};
      default : vgaY = {1'b0,9'bxxxxxxxxx};
    endcase
  end

  assign c$app_arg_0 = vgaX[10:10] ? 1'b1 : 1'b0;

  always @(*) begin
    case(result_6[11:10])
      2'b00 : vgaX = {1'b1,coord_0};
      default : vgaX = {1'b0,10'bxxxxxxxxxx};
    endcase
  end

  assign c$app_arg_1 = eta ? 1'b1 : 1'b0;

  always @(*) begin
    case(result_4[10:9])
      2'b10 : eta = 1'b1;
      default : eta = 1'b0;
    endcase
  end

  assign c$app_arg_2 = eta_0 ? 1'b1 : 1'b0;

  always @(*) begin
    case(result_6[11:10])
      2'b10 : eta_0 = 1'b1;
      default : eta_0 = 1'b0;
    endcase
  end

  assign coord = result_4[8:0];

  always @(*) begin
    case(result_3[11:10])
      2'b11 : result_0 = cnt_3 == 6'd47;
      default : result_0 = 1'b0;
    endcase
  end

  assign c$case_alt = (cnt_4 == 9'd479) ? {2'b01,4'd0,5'bxxxxx} : {2'b00,cnt_4 + 9'd1};

  assign c$case_alt_0 = (cnt_5 == 4'd10) ? {2'b10,1'd0,8'bxxxxxxxx} : {2'b01,cnt_5 + 4'd1,5'bxxxxx};

  assign c$case_alt_1 = (cnt_6 == 1'd1) ? {2'b11,5'd0,4'bxxxx} : {2'b10,cnt_6 + 1'd1,8'bxxxxxxxx};

  assign c$case_alt_2 = (cnt_7 == 5'd30) ? {2'b00,9'd0} : {2'b11,cnt_7 + 5'd1,4'bxxxx};

  always @(*) begin
    case(result_4[10:9])
      2'b00 : result_1 = c$case_alt;
      2'b01 : result_1 = c$case_alt_0;
      2'b10 : result_1 = c$case_alt_1;
      default : result_1 = c$case_alt_2;
    endcase
  end

  always @(*) begin
    case(result_3[11:10])
      2'b00 : result_2 = c$case_alt_6;
      2'b01 : result_2 = c$case_alt_5;
      2'b10 : result_2 = c$case_alt_4;
      default : result_2 = c$case_alt_3;
    endcase
  end

  assign cnt = result_3[9:4];

  assign c$case_alt_3 = (cnt == 6'd47) ? {2'b00,10'd0} : {2'b11,cnt + 6'd1,4'bxxxx};

  assign cnt_0 = result_3[9:3];

  assign c$case_alt_4 = (cnt_0 == 7'd95) ? {2'b11,6'd0,4'bxxxx} : {2'b10,cnt_0 + 7'd1,3'bxxx};

  assign cnt_1 = result_3[9:6];

  assign c$case_alt_5 = (cnt_1 == 4'd15) ? {2'b10,7'd0,3'bxxx} : {2'b01,cnt_1 + 4'd1,6'bxxxxxx};

  assign cnt_2 = result_3[9:0];

  assign c$case_alt_6 = (cnt_2 == 10'd639) ? {2'b01,4'd0,6'bxxxxxx} : {2'b00,cnt_2 + 10'd1};

  // register begin
  always @(posedge CLK_25MHZ or  posedge  RESET) begin : result_3_register
    if ( RESET) begin
      result_3 <= {2'b00,10'd0};
    end else begin
      result_3 <= result_2;
    end
  end
  // register end

  assign cnt_3 = result_3[9:4];

  assign cnt_4 = result_4[8:0];

  assign cnt_5 = result_4[8:5];

  assign cnt_6 = result_4[8:8];

  assign cnt_7 = result_4[8:4];

  // register begin
  always @(posedge CLK_25MHZ or  posedge  RESET) begin : result_4_register
    if ( RESET) begin
      result_4 <= {2'b00,9'd0};
    end else if (result_0) begin
      result_4 <= result_1;
    end
  end
  // register end

  assign coord_0 = result_6[9:0];

  always @(*) begin
    case(result_6[11:10])
      2'b00 : result_5 = c$case_alt_10;
      2'b01 : result_5 = c$case_alt_9;
      2'b10 : result_5 = c$case_alt_8;
      default : result_5 = c$case_alt_7;
    endcase
  end

  assign cnt_8 = result_6[9:4];

  assign c$case_alt_7 = (cnt_8 == 6'd47) ? {2'b00,10'd0} : {2'b11,cnt_8 + 6'd1,4'bxxxx};

  assign cnt_9 = result_6[9:3];

  assign c$case_alt_8 = (cnt_9 == 7'd95) ? {2'b11,6'd0,4'bxxxx} : {2'b10,cnt_9 + 7'd1,3'bxxx};

  assign cnt_10 = result_6[9:6];

  assign c$case_alt_9 = (cnt_10 == 4'd15) ? {2'b10,7'd0,3'bxxx} : {2'b01,cnt_10 + 4'd1,6'bxxxxxx};

  assign cnt_11 = result_6[9:0];

  assign c$case_alt_10 = (cnt_11 == 10'd639) ? {2'b01,4'd0,6'bxxxxxx} : {2'b00,cnt_11 + 10'd1};

  // register begin
  always @(posedge CLK_25MHZ or  posedge  RESET) begin : result_6_register
    if ( RESET) begin
      result_6 <= {2'b00,10'd0};
    end else begin
      result_6 <= result_5;
    end
  end
  // register end

  // register begin
  always @(posedge CLK_25MHZ or  posedge  RESET) begin : c$b_app_arg_register
    if ( RESET) begin
      c$b_app_arg <= {1'b0,10'bxxxxxxxxxx};
    end else begin
      c$b_app_arg <= result[20:10];
    end
  end
  // register end

  assign c$case_alt_11 = (a1 == b1) ? 1'b0 : 1'b1;

  assign c$case_alt_selection_14 = result[20:10];

  assign c$case_alt_12 = c$case_alt_selection_14[10:10] ? 1'b1 : 1'b0;

  assign c$case_alt_selection_17 = result[20:10];

  assign c$case_alt_13 = c$case_alt_selection_17[10:10] ? c$case_alt_11 : 1'b1;

  assign a1 = c$b_app_arg[9:0];

  assign b1 = result[19:10];

  assign result_7 = c$b_app_arg[10:10] ? c$case_alt_13 : c$case_alt_12;

  assign c$f2_case_alt = (x == 9'd511) ? {1'b0,9'bxxxxxxxxx} : {1'b1,x + 9'd1};

  assign c$f2_case_scrut_selection_1 = result[20:10];

  assign c$f2_case_scrut = c$f2_case_scrut_selection_1[10:10] ? (a1_0 == 10'd64) : 1'b0;

  assign c$f2_case_alt_0 = r[9:9] ? c$f2_case_alt : {1'b0,9'bxxxxxxxxx};

  assign result_8 = b_0 ? {1'b0,9'bxxxxxxxxx} : f2;

  assign result_9 = b ? r : result_8;

  assign x = r[8:0];

  // register begin
  always @(posedge CLK_25MHZ or  posedge  RESET) begin : r_register
    if ( RESET) begin
      r <= {1'b0,9'bxxxxxxxxx};
    end else begin
      r <= result_9;
    end
  end
  // register end

  assign a1_0 = result[19:10];

  assign b = ~ result_7;

  assign b_selection_1 = result[20:10];

  assign b_0 = b_selection_1[10:10] ? 1'b0 : 1'b1;

  assign f2 = c$f2_case_scrut ? {1'b1,9'd0} : c$f2_case_alt_0;

  assign result_10 = {result_12,   result_11};

  assign result_11 = b_1 ? {1'b1,result_14} : {1'b0,1'bx};

  assign b_1 = result_12[8:8] ? 1'b1 : 1'b0;

  assign x_0 = scaled[7:0];

  // register begin
  always @(posedge CLK_25MHZ or  posedge  RESET) begin : scaled_register
    if ( RESET) begin
      scaled <= {1'b0,8'bxxxxxxxx};
    end else begin
      scaled <= result_12;
    end
  end
  // register end

  assign result_12 = b_3 ? scaled : result_13;

  assign result_13 = b_2 ? c$f2_case_alt_1 : scaled;

  assign b_2 = result_14 == 1'd0;

  assign c$f2_case_alt_1 = scaled[8:8] ? c$f2_case_alt_2 : {1'b1,8'd0};

  assign c$f2_case_alt_2 = (x_0 == 8'd255) ? {1'b0,8'bxxxxxxxx} : {1'b1,x_0 + 8'd1};

  // register begin
  always @(posedge CLK_25MHZ or  posedge  RESET) begin : counter_register
    if ( RESET) begin
      counter <= 1'd0;
    end else begin
      counter <= result_14;
    end
  end
  // register end

  assign result_14 = b_3 ? counter : result_16;

  assign b_3 = ~ result_15;

  assign c$case_alt_14 = (a1_1 == b1_0) ? 1'b0 : 1'b1;

  assign c$case_alt_15 = prev[9:9] ? 1'b1 : 1'b0;

  assign c$case_alt_16 = prev[9:9] ? c$case_alt_14 : 1'b1;

  assign a1_1 = result_9[8:0];

  assign b1_0 = prev[8:0];

  assign result_15 = result_9[9:9] ? c$case_alt_16 : c$case_alt_15;

  assign result_16 = b_4 ? 1'd0 : f2_0;

  assign f2_0 = (counter == 1'd1) ? 1'd0 : (counter + 1'd1);

  assign b_4 = prev[9:9] ? 1'b0 : 1'b1;

  // register begin
  always @(posedge CLK_25MHZ or  posedge  RESET) begin : prev_register
    if ( RESET) begin
      prev <= {1'b0,9'bxxxxxxxxx};
    end else begin
      prev <= result_9;
    end
  end
  // register end

  // register begin
  always @(posedge CLK_25MHZ or  posedge  RESET) begin : c$b_app_arg_0_register
    if ( RESET) begin
      c$b_app_arg_0 <= {1'b0,9'bxxxxxxxxx};
    end else begin
      c$b_app_arg_0 <= result[9:0];
    end
  end
  // register end

  assign c$case_alt_17 = (a1_2 == b1_1) ? 1'b0 : 1'b1;

  assign c$case_alt_selection_24 = result[9:0];

  assign c$case_alt_18 = c$case_alt_selection_24[9:9] ? 1'b1 : 1'b0;

  assign c$case_alt_selection_27 = result[9:0];

  assign c$case_alt_19 = c$case_alt_selection_27[9:9] ? c$case_alt_17 : 1'b1;

  assign a1_2 = c$b_app_arg_0[8:0];

  assign b1_1 = result[8:0];

  assign result_17 = c$b_app_arg_0[9:9] ? c$case_alt_19 : c$case_alt_18;

  assign c$f2_case_alt_3 = (x_1 == 9'd399) ? {1'b0,9'bxxxxxxxxx} : {1'b1,x_1 + 9'd1};

  assign c$f2_case_scrut_selection_4 = result[9:0];

  assign c$f2_case_scrut_0 = c$f2_case_scrut_selection_4[9:9] ? (a1_3 == 9'd40) : 1'b0;

  assign c$f2_case_alt_4 = r_0[9:9] ? c$f2_case_alt_3 : {1'b0,9'bxxxxxxxxx};

  assign result_18 = b_6 ? {1'b0,9'bxxxxxxxxx} : f2_1;

  assign result_19 = b_5 ? r_0 : result_18;

  assign x_1 = r_0[8:0];

  // register begin
  always @(posedge CLK_25MHZ or  posedge  RESET) begin : r_0_register
    if ( RESET) begin
      r_0 <= {1'b0,9'bxxxxxxxxx};
    end else begin
      r_0 <= result_19;
    end
  end
  // register end

  assign a1_3 = result[8:0];

  assign b_5 = ~ result_17;

  assign b_selection_6 = result[9:0];

  assign b_6 = b_selection_6[9:9] ? 1'b0 : 1'b1;

  assign f2_1 = c$f2_case_scrut_0 ? {1'b1,9'd0} : c$f2_case_alt_4;

  assign result_20 = {result_22,   result_21};

  assign result_21 = b_7 ? {1'b1,result_24} : {1'b0,1'bx};

  assign b_7 = result_22[8:8] ? 1'b1 : 1'b0;

  assign x_2 = scaled_0[7:0];

  // register begin
  always @(posedge CLK_25MHZ or  posedge  RESET) begin : scaled_0_register
    if ( RESET) begin
      scaled_0 <= {1'b0,8'bxxxxxxxx};
    end else begin
      scaled_0 <= result_22;
    end
  end
  // register end

  assign result_22 = b_9 ? scaled_0 : result_23;

  assign result_23 = b_8 ? c$f2_case_alt_5 : scaled_0;

  assign b_8 = result_24 == 1'd0;

  assign c$f2_case_alt_5 = scaled_0[8:8] ? c$f2_case_alt_6 : {1'b1,8'd0};

  assign c$f2_case_alt_6 = (x_2 == 8'd199) ? {1'b0,8'bxxxxxxxx} : {1'b1,x_2 + 8'd1};

  // register begin
  always @(posedge CLK_25MHZ or  posedge  RESET) begin : counter_0_register
    if ( RESET) begin
      counter_0 <= 1'd0;
    end else begin
      counter_0 <= result_24;
    end
  end
  // register end

  assign result_24 = b_9 ? counter_0 : result_26;

  assign b_9 = ~ result_25;

  assign c$case_alt_20 = (a1_4 == b1_2) ? 1'b0 : 1'b1;

  assign c$case_alt_21 = prev_0[9:9] ? 1'b1 : 1'b0;

  assign c$case_alt_22 = prev_0[9:9] ? c$case_alt_20 : 1'b1;

  assign a1_4 = result_19[8:0];

  assign b1_2 = prev_0[8:0];

  assign result_25 = result_19[9:9] ? c$case_alt_22 : c$case_alt_21;

  assign result_26 = b_10 ? 1'd0 : f2_2;

  assign f2_2 = (counter_0 == 1'd1) ? 1'd0 : (counter_0 + 1'd1);

  assign b_10 = prev_0[9:9] ? 1'b0 : 1'b1;

  // register begin
  always @(posedge CLK_25MHZ or  posedge  RESET) begin : prev_0_register
    if ( RESET) begin
      prev_0 <= {1'b0,9'bxxxxxxxxx};
    end else begin
      prev_0 <= result_19;
    end
  end
  // register end

  assign c$st_case_alt = s ? 1'b0 : 1'b1;

  assign result_27 = old ? c$st_case_alt : 1'b0;

  assign inp = {(BTN_UP) == 1'b1,
                (BTN_DOWN) == 1'b1};

  assign result_28 = c$case_alt_23;

  assign c$case_alt_23 = (x_3 > 10'sd256) ? {{10'sd128,
                                              $signed(x1[9:0])},   x2,   x3,   1'b1} : {x1,
                                                                                        x2,   x3,   1'b0};

  assign x_3 = $signed(x1[19:10]);

  assign x3 = $signed(c$case_alt_24[10:1]);

  assign x2 = c$case_alt_24[30:11];

  assign x1 = c$case_alt_24[50:31];

  assign x1_0 = c$updateState_$jOut_app_arg[50:31];

  assign x2_0 = c$updateState_$jOut_app_arg[30:11];

  assign x3_0 = $signed(c$updateState_$jOut_app_arg[10:1]);

  assign x4 = c$updateState_$jOut_app_arg[0:0];

  assign c$case_alt_24 = {x1_0,   x2_0,
                          c$app_arg_3,   x4};

  assign c$app_arg_3 = (10'sd145 <= x3_0) ? 10'sd145 : c$case_alt_25;

  assign c$case_alt_25 = (10'sd5 <= x3_0) ? x3_0 : 10'sd5;

  assign c$updateState_$jOut_app_arg = inp[1:1] ? c$updateState_$jOut_case_alt_0 : c$updateState_$jOut_case_alt;

  assign c$updateState_$jOut_case_alt = inp[0:0] ? {x1_1,
                                                    x2_1,   x3_1 + 10'sd3,   x4_0} : result_29;

  assign c$updateState_$jOut_case_alt_0 = inp[0:0] ? {x1_1,
                                                      x2_1,
                                                      c$updateState_$jOut_app_arg_0 + 10'sd3,
                                                      x4_0} : {x1_1,   x2_1,
                                                               c$updateState_$jOut_app_arg_0,   x4_0};

  assign x4_0 = result_29[0:0];

  assign x2_1 = result_29[30:11];

  assign x1_1 = result_29[50:31];

  assign c$updateState_$jOut_app_arg_0 = x3_1 - 10'sd3;

  assign x3_1 = $signed(result_29[10:1]);

  assign result_29 = ((x3_2 - 10'sd5) <= y) ? c$app_arg_app_arg_case_alt : {c$updateState_$sreflectM_$jOut_0[19:0],
                                                                            a2,   x3_2,   x4_1};

  assign c$app_arg_app_arg_case_alt = (y <= (x3_2 + 10'sd50)) ? c$app_arg_app_arg_case_alt_0 : {c$updateState_$sreflectM_$jOut_0[19:0],
                                                                                                a2,   x3_2,   x4_1};

  assign c$app_arg_app_arg_case_alt_0 = s3 ? {a3,
                                              {y,   $signed(a2[9:0]) + nudge},   x3_2,
                                              x4_1} : {a3,   a2,   x3_2,   x4_1};

  assign s3 = c$updateState_$sreflectM_$jOut[20:20];

  assign nudge = inp[0:0] ? 10'sd3 : c$nudge_case_alt;

  assign c$nudge_case_alt = inp[1:1] ? -10'sd3 : 10'sd0;

  assign a3 = c$updateState_$sreflectM_$jOut[19:0];

  always @(*) begin
    case(c$updateState_$sreflectM_$jOut_app_arg)
      2'b10 : c$updateState_$sreflectM_$jOut = {1'b1,
                                                {10'sd246 + diff,   -dx}};
      default : c$updateState_$sreflectM_$jOut = {1'b0,
                                                  c$updateState_$sreflectM_$jOut_0[19:0]};
    endcase
  end

  assign dx = $signed(c$updateState_$sreflectM_$jOut_0[9:0]);

  assign c$updateState_$sreflectM_$jOut_app_arg = (10'sd0 == diff) ? 2'd1 : c$updateState_$sreflectM_$jOut_case_alt;

  assign c$updateState_$sreflectM_$jOut_case_alt = (10'sd0 <= diff) ? 2'd0 : 2'd2;

  assign diff = 10'sd246 - x_4;

  assign x_4 = $signed(c$updateState_$sreflectM_$jOut_0[19:10]);

  assign x4_1 = st[0:0];

  assign eta1 = {x7 + dx1,   dx1};

  always @(*) begin
    case(c$updateState_$sreflectM_$jOut_app_arg_0)
      2'b00 : c$updateState_$sreflectM_$jOut_0 = {1'b1,
                                                  {10'sd5 + diff_0,   -dx_0}};
      default : c$updateState_$sreflectM_$jOut_0 = {1'b0,
                                                    eta1};
    endcase
  end

  assign dx_0 = $signed(eta1[9:0]);

  assign c$updateState_$sreflectM_$jOut_app_arg_0 = (10'sd0 == diff_0) ? 2'd1 : c$updateState_$sreflectM_$jOut_case_alt_0;

  assign c$updateState_$sreflectM_$jOut_case_alt_0 = (10'sd0 <= diff_0) ? 2'd0 : 2'd2;

  assign diff_0 = 10'sd5 - x_5;

  assign x_5 = $signed(eta1[19:10]);

  assign dx1 = $signed(x1_2[9:0]);

  assign x7 = $signed(x1_2[19:10]);

  assign x1_2 = st[50:31];

  assign y = $signed(a2[19:10]);

  assign a2 = c$updateState_$sreflectM_$jOut_1[19:0];

  always @(*) begin
    case(c$updateState_$sreflectM_$jOut_app_arg_1)
      2'b10 : c$updateState_$sreflectM_$jOut_1 = {1'b1,
                                                  {10'sd190 + diff_1,   -dx_1}};
      default : c$updateState_$sreflectM_$jOut_1 = {1'b0,
                                                    \s' };
    endcase
  end

  assign dx_1 = $signed(\s' [9:0]);

  assign c$updateState_$sreflectM_$jOut_app_arg_1 = (10'sd0 == diff_1) ? 2'd1 : c$updateState_$sreflectM_$jOut_case_alt_1;

  assign c$updateState_$sreflectM_$jOut_case_alt_1 = (10'sd0 <= diff_1) ? 2'd0 : 2'd2;

  assign diff_1 = 10'sd190 - x_6;

  assign x_6 = $signed(\s' [19:10]);

  assign \s'  = c$updateState_$sreflectM_$jOut_2[19:0];

  assign eta1_0 = {x_8 + dx_3,   dx_3};

  always @(*) begin
    case(c$updateState_$sreflectM_$jOut_app_arg_2)
      2'b00 : c$updateState_$sreflectM_$jOut_2 = {1'b1,
                                                  {10'sd5 + diff_2,   -dx_2}};
      default : c$updateState_$sreflectM_$jOut_2 = {1'b0,
                                                    eta1_0};
    endcase
  end

  assign dx_2 = $signed(eta1_0[9:0]);

  assign c$updateState_$sreflectM_$jOut_app_arg_2 = (10'sd0 == diff_2) ? 2'd1 : c$updateState_$sreflectM_$jOut_case_alt_2;

  assign c$updateState_$sreflectM_$jOut_case_alt_2 = (10'sd0 <= diff_2) ? 2'd0 : 2'd2;

  assign diff_2 = 10'sd5 - x_7;

  assign x_7 = $signed(eta1_0[19:10]);

  assign dx_3 = $signed(x2_2[9:0]);

  assign x_8 = $signed(x2_2[19:10]);

  assign x2_2 = st[30:11];

  assign x3_2 = $signed(st[10:1]);

  assign c$x_app_arg = $unsigned({{(32-8) {1'b0}},x1_3});

  assign c$y_app_arg = $unsigned({{(32-8) {1'b0}},y1});

  assign c$case_alt_26 = (x_9 <= 10'sd256) ? c$case_alt_27 : 1'b0;

  assign c$case_alt_27 = ($signed(st[10:1]) <= y_0) ? (y_0 <= ($signed(st[10:1]) + 10'sd50)) : 1'b0;

  assign result_30 = (10'sd251 <= x_9) ? c$case_alt_26 : 1'b0;

  assign x0 = $signed(st[50:41]);

  assign y0 = $signed(st[30:21]);

  assign c$case_alt_28 = (x0 <= x_9) ? c$case_alt_29 : 1'b0;

  assign c$case_alt_29 = (x_9 <= (x0 + 10'sd5)) ? c$case_alt_30 : 1'b0;

  assign c$case_alt_30 = (y0 <= y_0) ? (y_0 <= (y0 + 10'sd5)) : 1'b0;

  assign c$case_alt_31 = st[0:0] ? {8'd128,
                                    8'd0,   8'd0} : {8'd48,   8'd48,   8'd48};

  assign c$case_alt_32 = c$case_alt_28 ? {8'd240,
                                          8'd224,   8'd64} : c$case_alt_31;

  assign c$case_alt_33 = result_30 ? {8'd64,
                                      8'd128,   8'd240} : c$case_alt_32;

  assign c$case_alt_34 = (y_0 >= 10'sd195) ? {8'd255,
                                              8'd255,   8'd255} : c$case_alt_33;

  assign result_31 = (y_0 < 10'sd5) ? {8'd255,
                                       8'd255,   8'd255} : c$case_alt_34;

  assign result_32 = (x_9 < 10'sd5) ? {8'd255,
                                       8'd255,   8'd255} : result_31;

  assign x_9 = $signed(c$x_app_arg[0+:10]);

  assign y_0 = $signed(c$y_app_arg[0+:10]);

  assign c$ds4_app_arg = $signed(\x# );

  assign c$ds4_app_arg_0 = $signed(\x#_0 );

  assign c$ds4_app_arg_1 = $signed(\x#_1 );

  assign c$ds3_case_alt = b_11;

  assign c$case_alt_35 = eta5[8:8] ? {a3_0,
                                      a1_5,   b1_5} : {8'd0,   8'd0,   8'd0};

  assign result_33 = eta4[8:8] ? c$case_alt_35 : {8'd0,
                                                  8'd0,   8'd0};

  assign result_34 = b1_3 ? {8'd0,   8'd0,
                             8'd0} : result_33;

  assign VGA = {result[23:21],
                result_34[23:16],   result_34[15:8],
                result_34[7:0]};

  assign b1_3 = ~ result[21:21];

  assign a2_0 = b1_4[15:8];

  assign b2 = b1_4[7:0];

  assign eta4 = result_10[10:2];

  assign eta5 = result_20[10:2];

  assign x1_3 = eta4[7:0];

  assign y1 = eta5[7:0];

  // register begin
  always @(posedge CLK_25MHZ or  posedge  RESET) begin : old_register
    if ( RESET) begin
      old <= 1'b0;
    end else begin
      old <= s;
    end
  end
  // register end

  assign b_11 = ds4[15:0];

  assign a3_0 = ds4[23:16];

  assign a3_1 = result_32[23:16];

  assign a4 = result_32[15:8];

  assign a5 = result_32[7:0];

  assign b1_4 = {a4,   a5};

  assign a1_5 = c$ds3_case_alt[15:8];

  assign b1_5 = c$ds3_case_alt[7:0];

  assign \x#  = a3_1;

  assign \x#_0  = a2_0;

  assign \x#_1  = b2;

  // register begin
  always @(posedge CLK_25MHZ or  posedge  RESET) begin : st_register
    if ( RESET) begin
      st <= {{10'sd10,   10'sd2},   {10'sd100,   10'sd3},   10'sd100,   1'b0};
    end else if (result_27) begin
      st <= result_28;
    end
  end
  // register end

  assign ds4 = ({($unsigned(c$ds4_app_arg[0+:8])),({($unsigned(c$ds4_app_arg_0[0+:8])),($unsigned(c$ds4_app_arg_1[0+:8]))})});

  assign s_selection_1 = result[9:0];

  assign s = s_selection_1[9:9] ? 1'b1 : 1'b0;

  assign VGA_0 = VGA[26:24];

  assign VGA_RED = VGA[23:16];

  assign VGA_GREEN = VGA[15:8];

  assign VGA_BLUE = VGA[7:0];

  assign VGA_HSYNC = VGA_0[2:2];

  assign VGA_VSYNC = VGA_0[1:1];

  assign VGA_DE = VGA_0[0:0];


endmodule

